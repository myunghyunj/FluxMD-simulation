name: FluxMD CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTEST_TIMEOUT: 300
  BENCHMARK_THRESHOLD: 0.05  # 5% performance regression threshold

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run black
      run: black --check fluxmd/ tests/
    
    - name: Run isort
      run: isort --check-only fluxmd/ tests/
    
    - name: Run flake8
      run: flake8 fluxmd/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run ruff
      run: ruff check fluxmd/
    
    - name: Run mypy
      run: mypy fluxmd/ --ignore-missing-imports
    
    - name: Run bandit security scan
      run: bandit -r fluxmd/ -ll
    
    - name: Check safety
      run: safety check

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Skip older Python on newer macOS
          - os: macos-latest
            python-version: '3.8'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        activate-environment: fluxmd-ci
        environment-file: .github/ci-environment.yml
        auto-activate-base: false
    
    - name: Cache conda environment
      uses: actions/cache@v3
      with:
        path: ~/miniconda3/envs/fluxmd-ci
        key: ${{ runner.os }}-conda-${{ matrix.python-version }}-${{ hashFiles('.github/ci-environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-${{ matrix.python-version }}-
    
    - name: Install FluxMD
      shell: bash -l {0}
      run: |
        pip install -e ".[dev,gpu,viz]"
    
    - name: Run unit tests
      shell: bash -l {0}
      run: |
        pytest tests/ -v --cov=fluxmd --cov-report=xml --cov-report=term \
          -k "not integration and not benchmark" \
          --timeout=${{ env.PYTEST_TIMEOUT }}
    
    - name: Run integration tests with synthetic system
      shell: bash -l {0}
      run: |
        pytest tests/test_matryoshka_integration.py -v \
          --synthetic-only \
          --timeout=${{ env.PYTEST_TIMEOUT }}
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  benchmark:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Need full history for baseline comparison
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: '3.10'
        activate-environment: fluxmd-bench
        environment-file: .github/ci-environment.yml
        auto-activate-base: false
    
    - name: Install FluxMD
      shell: bash -l {0}
      run: |
        pip install -e ".[dev,gpu,viz]"
    
    - name: Download baseline benchmarks
      uses: actions/download-artifact@v3
      with:
        name: benchmark-baseline
        path: .benchmarks/
      continue-on-error: true
    
    - name: Run benchmarks
      shell: bash -l {0}
      run: |
        pytest tests/test_matryoshka_benchmarks.py \
          --benchmark-json=.benchmarks/new.json \
          --benchmark-only \
          --benchmark-columns=min,max,mean,stddev \
          --benchmark-warmup=on \
          --benchmark-warmup-iterations=3
    
    - name: Compare benchmarks
      if: github.event_name == 'pull_request'
      shell: bash -l {0}
      run: |
        if [ -f .benchmarks/baseline.json ]; then
          python scripts/compare_benchmarks.py \
            .benchmarks/baseline.json \
            .benchmarks/new.json \
            --threshold ${{ env.BENCHMARK_THRESHOLD }}
        else
          echo "No baseline found, skipping comparison"
        fi
    
    - name: Store benchmark results
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-baseline
        path: .benchmarks/new.json
        retention-days: 90
    
    - name: Generate benchmark report
      if: always()
      shell: bash -l {0}
      run: |
        pytest tests/test_matryoshka_benchmarks.py \
          --benchmark-only \
          --benchmark-histogram=.benchmarks/histogram \
          --benchmark-json=.benchmarks/report.json
    
    - name: Upload benchmark artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-reports-${{ github.sha }}
        path: .benchmarks/

  matryoshka-validation:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: '3.10'
        activate-environment: fluxmd-val
        environment-file: .github/ci-environment.yml
        auto-activate-base: false
    
    - name: Install FluxMD
      shell: bash -l {0}
      run: |
        pip install -e ".[dev,gpu,viz]"
    
    - name: Run Matryoshka physics validation
      shell: bash -l {0}
      run: |
        python tests/validate_matryoshka_physics.py \
          --output-dir validation_results/
    
    - name: Upload validation results
      uses: actions/upload-artifact@v3
      with:
        name: matryoshka-validation-${{ github.sha }}
        path: validation_results/

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocstrings[python]
    
    - name: Build documentation
      run: mkdocs build --strict
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/